{
  "0": [
    {
      "name": "viridian",
      "title": "Viridian",
      "tags": [
        "Angular",
        "TypeScript",
        "Tailwind",
        "Electron"
      ],
      "link": "https://github.com/Hipnosis183/Viridian",
      "description": "<b>Viridian</b> is an <b>FFmpeg</b>-based, feature-rich <b>video editor</b>, offering a wide variety of both <b>lossless</b> and <b>lossy</b> operations. It allows you to easily manipulate video files without having to deal with the command line and FFmpeg's complexity, ensuring always the <b>best output quality possible</b>.\n\nViridian is also an excellent tool for advanced users, as it enables you to <b>manually edit</b> the final output command as you wish, without holding back any little nuances you might like to control.\n\n<h2>Features</h2><li><b>Fast</b>, as it uses native FFmpeg binaries for video processing</li><li>Simple, yet <b>powerful video player</b>, with support for thumbnails, various navigation options (frame advance, between clips, keyframes, etc.) and metadata correction (aspect ratio, rotation)</li><li>Lossy visual operations such as <b>crop</b>, <b>rotate</b>, <b>flip/mirror</b> and <b>scale</b></li><li>Open multiple files at once, allowing lossless and lossy <b>concatenation</b></li><li>Several <b>video cut</b> modes: lossy, lossless (normal and keyframe) and smart (lossy + lossless)</li><li>Rich cut manipulation: drag, resize, snap, split and manually edit video clips</li><li>Export clips to individual files or merge everything together</li><li>Extensive video format and encoding output settings</li><li>View current encoding status (lossy/lossless/mixed)</li><li>View and modify the final output command</li><li>File tracks and metadata viewer</li><li>Frame capture/screenshot</li><li>Remove audio tracks</li><li>Clear file metadata</li>",
      "images": 4,
      "dark": true
    },
    {
      "name": "glaucous",
      "title": "Glaucous",
      "tags": [
        "Vue",
        "Tailwind",
        "Electron",
        "NeDB"
      ],
      "link": "https://github.com/Hipnosis183/Glaucous",
      "description": "<b>Glaucous</b> is a videogames database builder, library manager and emulator frontend. It allows you to create your own customized database, plus the ability to use it as a <i>launcher/frontend</i>.\n\nThe application and database are designed to be as dynamic as possible, giving you the freedom to choose what you want to see and how. Customization and flexibility are paramount, allowing you to adapt your current setup without forcing any specific changes to work.\n\nA quality database is being slowly worked on. Once it reaches a mature state, it will be available online, and users will be able to scrape the information from the application right away. Extensive documentation for the program usage and configuration will also be available at a later date.",
      "images": 10,
      "dark": true
    },
    {
      "name": "instagular",
      "title": "Instagular",
      "tags": [
        "Angular",
        "Tailwind",
        "TypeScript",
        "NodeJS",
        "API"
      ],
      "link": "https://github.com/Hipnosis183/Instagular",
      "description": "<b>Instagular</b> is a custom web client for Instagram, aiming for a better desktop experience, unlike the mobile-on-web design that the official site has, while adding extra features not found on regular Instagram.\n\nThis project implements its own backend API server using a custom fork of <a href='https://github.com/Hipnosis183/instagram-private-api'>instagram-private-api</a> to connect/interface to Instagram, acting as a middleware between the Instagular client and the Instagram server.\n\nThe app is fully compatible with Instagram routing structure, so it's possible to replace the domain with Instagular's and continue navigating right away.\n\nWhile the app should be safe to use in general (I personally use it myself), there's still the possibility for the user account to get blocked if too many actions/requests are made in a short period of time, or if a feature is not implemented correctly. Therefore, I won't take responsability for any damages caused to your account, so use at your own risk.\n\n<h2>Implemented features</h2>\n<li>Login/logout with persistent session on local storage.</li><li>Feeds with auto pagination management.</li><li>Fullscreen media viewer, with high quality photos and videos play.</li><li>Profile user pages (posts, reels, videos, tagged).</li><li>Stories/highlights support.</li><li>User interaction (like/unlike, follow/unfollow, comments).</li><li>High/original quality media download.</li><li>Saved collections management.</li><li>Users search engine.</li>\nPlanned features:\n\n<li>Stories interaction.</li><li>Direct messaging.</li><li>Activity/notifications.</li><li>Quality of life options (dark mode, accesibility, etc.)</li>",
      "images": 7,
      "dark": true
    },
    {
      "name": "salne",
      "title": "SALNE",
      "tags": [
        "AngularJS",
        "NodeJS + Express",
        "MongoDB"
      ],
      "link": "https://github.com/Hipnosis183/SALNE",
      "description": "Aplicación web <b>MEAN Full Stack</b>, integrada por un servidor <b>Backend API</b> en <b>Node.js</b> y <b>Express</b>, base de datos en <b>MongoDB</b>, y un <b>Frontend</b> en <b>AngularJS + Material</b>.\n\nProyecto escolar final de carrera (<i>Prácticas Profesionalizantes</i>). No había requerimientos, así que me tomé la libertad para aplicar el trabajo final de <i>Gestión de Proyectos</i> a un producto de software real, a la vez que aprendí a desarrollar una aplicación web <b><i>Full Stack</i></b>.\n\nLa aplicación se desarrolló en dos formas diferentes:\n\n<li><code>salne-server</code> consiste en un servidor de <b><i>Node.js</b></i> con <b><i>Express</b></i>, renderizando las vistas del lado del servidor junto al uso de <b><i>Nunjucks</b></i> como template engine.</li><li><code>salne-backend</code> es un servidor <b><i>API</b></i> en <b><i>Node.js</b></i> con <b><i>Express</b></i>, y <code>salne-frontend</code> es un cliente en <b><i>AngularJS</b></i> y <b><i>Material</b></i> que se comunica con la <i>API</i>, separando así la lógica de negocios de la interfaz de usuario.</li>\nAmbas aplicaciones utilizan <b><i>MongoDB</b></i> con <b><i>Mongoose</b></i> para la base de datos. También incluyo la presentación del producto final, donde explico el desarrollo.",
      "images": 6,
      "dark": true
    }
  ],
  "1": [
    {
      "name": "jm-server",
      "title": "JM-Server",
      "tags": [
        "C",
        "NodeJS + Express",
        "MongoDB"
      ],
      "link": "https://github.com/Hipnosis183/JM-Server",
      "description": "<b>JM-Server</b> is a server emulator for <b><i>Jewelry Master</b></i>, an online arcade puzzle game developed by <b><i>Arika</b></i> in 2006. This project served as a gameplay test for the next game in the series, <b><i>Jewelry Master Twinkle</b></i>. The original service ceased operations around 2011, and since then it remained unplayable, until now.\n\nThe server functionality has been fully reverse engineered and reimplemented in two different ways:\n\n<li>A <b>NodeJS server</b>, mimicking how the original server worked, where people can connect to from the client over the internet.</li><li>An <b>embedded C server</b>, as a portable solution that doesn't require any external server nor database initialization, while maintaining the full functionality and behaviour of the original.</li>\nBoth implement complete user and rankings/leaderboards management, including replays storage. In addition, some options are available to further customise the server behaviour.\n\n<h2>NodeJS Server</h2>The <b>NodeJS</b> version is meant to be used for hosting servers over the internet, although it can still be used to connect and play locally. As it uses proper server tech and a robust database engine (<b>MongoDB</b>), it's more suitable to handle multiple connections and big amounts of data.\n\nTo setup the server you'll need <b>Node</b>, <b>NPM</b> and <b>MongoDB Server</b>, and then install the dependencies with <code>npm install</code>. Use <code>node app.js</code> to run the server, or if you're on Windows, run the included <code>start.bat</code>, which also initializes the Mongo service. Replay files are stored in the server root directory, under the <code>rep</code> folder.\n\nTo change the server options, you'll have to modify the constants under <code>app.js</code> (connection) and <code>service.js</code> (users). To connect to a Node server from the client, add an entry in the <i>hosts file</i> redirecting <code>hg.arika.co.jp</code> to the server address, or read the section below.\n\n<h2>C Server</h2>The <b>C</b> solution is provided for local and portable use, where by just running the executable, it initializes a minimal <b>Mongoose</b> embedded server with a light and performant <b>LMDB</b> database, at the same time it hooks the networking functions of the game to redirect the internal API calls to this local server.\n\nThis version doesn't require any dependencies, just place the files in the game folder and run the executable. The options can be changed in the <code>server.ini</code> file, but the default configuration is already the ideal for local play, and it will save both the database and replays under the <code>server</code> folder. These options are:\n\n<li><b>ServerMode</b>: Select the way the server is going to work.</li><li><b>HostName</b>: Select server address to connect to or host from.</li><li><b>HookDLL</b>: Enable/disable networking functions hooking.</li><li><b>Register</b>: Allow unregistered users to be registered at the login screen.</li><li><b>MultiScores</b>: Allow users to have mutiple scores (and replays) in the global rankings.</li><li><b>NoScores</b>: Disable scores and replays saving.</li>\nThe different server modes allow you to play locally, connect to a server online, and host your own server over local or wide network. The modes affect the purpose of the <code>HostName</code> property value. All of this information can be found in detail inside the <code>server.ini</code> file. This also works as an alternative to modifying the <i>hosts file</i> manually.",
      "images": 0,
      "dark": false
    },
    {
      "name": "ttx-monitor",
      "title": "TTX-Monitor",
      "tags": [
        "C/C++",
        "C#",
        "DirectX"
      ],
      "link": "https://github.com/Hipnosis183/TTX-Monitor",
      "description": "<b>TTX-Monitor+</b> is a loader for <i>Taito's Type X</i> arcade machines software.\nOriginally developed by <i>Romhack</i>: <a href='https://github.com/zxmarcos/ttx_monitor'>ttx_monitor</a>\n\nSome features were added/changed/removed:\n\n<li>Added support for <i>AxisR</i> and <i>AxisZ</i></li><li>Added option <i>PovAsAxis</i></li><li>Corrected the sensitivity of the deadzone</li><li>Added the standard <i>SavePatch</i> function</li><li>Developed a new configuration user interface</li><li>Removed the <i>Direct3D</i> wrapper</li><li>Deactivated the logging engine</li>\nThe biggest feature should be the implementation of a new <i>DirectInput</i> wrapper with support for mahjong games, namely <i>Psikyo's</i> <b><i>Taisen Hot Gimmick 5</b></i>, and in the future, <b><i>Taisen Hot Gimmick Mix Party</b></i>.\n\nThe <i>SavePatch</i> doesn't work properly with all games, as some like <b><i>The King Of Fighters '98</b></i>, <b><i>Gouketsuji Ichizoku Senzo Kuyou</b></i> and <b><i>Trouble Witches</b></i> will store data but won't read it. A temporal solution would be patching the games accordingly.\n\nSome games like <b><i>Chaos Breaker</b></i> and <b><i>Homura</b></i> might have speed or other graphical issues in moder systems. A use of an external wrapper like <a href='http://dege.freeweb.hu/dgVoodoo2/dgVoodoo2.html'>dgVoodoo</a> will likely solve this issues, while some other enhancements may be used as well.\n\nThe code has been cleaned up a lot and reorganized completely, with some parts rewritten, so should be easier to see what's going on.",
      "images": 0,
      "dark": false
    },
    {
      "name": "xb-monitor",
      "title": "XB-Monitor",
      "tags": [
        "C/C++",
        "C#",
        "DirectX"
      ],
      "link": "https://github.com/Hipnosis183/XB-Monitor",
      "description": "<b>XB-Monitor+</b> is a loader for <i>Examu's eX-BOARD</i> arcade machines software.\nOriginally developed by <i>Romhack</i>: <a href='https://github.com/zxmarcos/xb_monitor'>xb_monitor</a>\n\nSome features were added/changed/removed:\n\n<li>Added support for <i>AxisR</i>, <i>AxisZ</i> and <i>POVs</i></li><li>Added option <i>PovAsAxis</i></li><li>Corrected the sensitivity of the deadzone</li><li>Added the standard <i>SavePatch</i> function</li><li>Developed a new configuration user interface</li><li>Removed the <i>DirectDraw</i> wrapper</li><li>Fixed some bugs in the Direct3D wrapper</li><li>Deactivated the logging engine</li>\nThe game <b><i>Arcana Heart 3</b></i> might need compatibility mode enabled in newer systems in order to work.\n\nThe code has been cleaned up a lot and reorganized completely, with some parts rewritten, so should be easier to see what's going on.",
      "images": 0,
      "dark": false
    },
    {
      "name": "quikziv",
      "title": "QuikZIV",
      "tags": [
        "C#",
        "Perl"
      ],
      "link": "https://github.com/Hipnosis183/QuikZIV",
      "description": "<b>QuikZIV</b> is an uncompressing tool for <i>ZIV</i> and <i>SQZ</i> files, using either <i>LZW</i> or <i>Huffman+RLE</i> compression. Developed to remove the protection of the CD-ROM version of <b><i>Quik The Thunder Rabbit</i></b>, it supports most (if not all) of <i>Titus Interactive older</i> games:\n\n<li>Prehistorik</li><li>Quik The Thunder Rabbit</li><li>Super Cauldron</li><li>Titus The Fox (and Moktar)</li><li>The Blues Brothers (series)</li>\nSome games, like <b><i>Prehistorik 2</b></i>, have some files that are not supported, either because of a different compression method or an additional level of protection.\n\nFor more in-depth information and details visit the <a href='http://www.shikadi.net/moddingwiki/Titus_Interactive_SQZ_Compression'>DOS Game Modding</a> Wiki.\n\nCredits:\n<li><a href='http://ttf.mine.nu/techdocs.htm'>Jesses</a> for all the research on the compression and the original uncompression implementation in pseudocode and Perl (in which I <i>strongly</i> based on).</li><li><a href='http://www.shikadi.net/moddingwiki/User:Eirik'>Eirik</a> for the UnSQZ unpacker and the great OpenTitus project.</li><li><a href='http://www.shikadi.net/moddingwiki/User:Frenkel'>Frenkel</a> for the QuickBASIC implementation of the Huffman algorithm and its awesome page S&F Prod.</li>",
      "images": 0,
      "dark": false
    },
    {
      "name": "nicolausikey",
      "title": "NicolausiKey",
      "tags": [
        "C#",
        "JavaScript",
        "C/Assembly"
      ],
      "link": "https://github.com/Hipnosis183/NicolausiKey",
      "description": "<b>NicolausiKey</b> is a key generator for the games <b><i>Nicolausi</b></i> and <b><i>PC-Bakterien</b></i> by <i>TOM Productions</i>, for both <i>DOS</i> and <i>Windows</i> versions.\n\nThe project contains three parts:\n\n<li>A <b>C#</b> implementation of the keygen (both <b>Windows Forms</b> and <b>Console</b>)</li><li>A <b>JavaScript</b> implementation of the keygen</li><li>The original revised decompilation</li>\nFor an in-depth analysis of the key generation algorithm, visit the <a href='https://hipnosis183.github.io/blog/the-art-of-cracks-and-keygens-nicolausi/'>article</a> I wrote over <a href='https://hipnosis183.github.io/'>my site</a>.",
      "images": 0,
      "dark": false
    }
  ]
}