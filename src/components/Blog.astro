---
// Import Astro elements.
import { getAbsoluteLocaleUrl } from "astro:i18n";

// Define current locale.
const locale = getAbsoluteLocaleUrl(Astro.currentLocale);

// Import language files.
const languages = await Astro.glob('@/assets/i18n/*.json');
const language = languages.filter((v) => v.LANG == Astro.currentLocale)[0];

// Manage posts ordering and grouping.
const posts = [];
const postsList = Astro.currentLocale == 'en' ? await Astro.glob('@/assets/posts/en/*.mdx') : await Astro.glob('@/assets/posts/es/*.mdx');
for (let post of postsList.sort((a, b) => { return new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf() })) {
  const i = posts.findIndex((v) => v.year == new Date(post.frontmatter.date).getFullYear());
  if (i >= 0) { posts[i].posts.push(post); }
  else { posts.push({ year: new Date(post.frontmatter.date).getFullYear(), posts: [post] }); }
}
---

<!-- Blog posts list. -->
<div class="blog-container">
  { posts.map(($posts) => (
    <div>
      { /* Blog posts group header. */ }
      <div class="blog-header">
        <p>{ $posts.year }</p>
        <p>{ $posts.posts.length + ' ' + ($posts.posts.length == 1 ? language.BLOG.POST : language.BLOG.POSTS) }</p>
      </div>
      { /* Blog posts group contents. */ }
      { $posts.posts.map((post) => (
        <li class="blog-body">
          <a href={ `${locale}blog/${post.frontmatter.code}/` }>
            { /* Blog post image. */ }
            <div class="blog-image">
              <div style={{ backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8)), url('${post.frontmatter.thumb}')`, backgroundPosition: post.frontmatter.position || 'center' }} />
            </div>
            { /* Blog post title. */ }
            <div class="blog-title">
              <h1>{ post.frontmatter.title }</h1>
              <p>{ post.frontmatter.description }</p>
            </div>
          </a>
        </li>
      )) }
    </div>
  )) }
</div>

<style>
/* Blog posts list. */
.blog-container {
  list-style: none;
  margin-left: auto;
  margin-right: auto;
  max-width: 1000px;
  width: 100%;
}
.blog-container > *:first-child {
  margin-top: -8px;
}
.blog-container > *:not(:first-child) {
  margin-top: 16px;
}

/* Blog posts group header. */
.blog-header {
  border-bottom: solid 1px var(--color-post-border);
  color: var(--color-grey);
  display: flex;
  font-size: 16px;
  justify-content: space-between;
  margin: 0 8px;
  padding: 0 6px 4px 6px;
  text-align: right;
  transition: border-color 0.2s;
}
.blog-header > p:first-child {
  font-weight: 800;
}

/* Blog posts group contents. */
.blog-body {
  padding-top: 16px;
}
.blog-body > a {
  align-items: center;
  cursor: pointer;
  display: flex;
  min-height: 190px;
  place-content: center;
  position: relative;
  text-decoration: none;
}

/* Blog post image. */
.blog-image {
  background-position: center;
  background-size: cover;
  border-radius: 8px;
  bottom: 0;
  left: 0;
  outline: 1px solid var(--color-post-border);
  overflow: hidden;
  position: absolute;
  right: 0;
  top: 0;
  transition: outline-color 0.2s;
}
.blog-image > div {
  background-position: center;
  background-size: cover;
  border-radius: 8px;
  height: 100%;
  transition: transform 0.2s;
  width: 100%;
}
.blog-image > div:hover {
  transform: scale(1.05);
}

/* Blog post title. */
.blog-title {
  margin-bottom: 0;
  padding: 20px;
  pointer-events: none;
  position: relative;
  text-align: center;
}
.blog-title > h1 {
  color: rgb(255, 255, 255);
  font-size: 42px;
  font-weight: 900;
  line-height: 1.1;
  margin-bottom: 16px;
  pointer-events: none;
  text-shadow: 0 0 4px black;
}
.blog-title > p {
  color: rgb(255, 255, 255);
  margin-bottom: 0;
  text-shadow: 0 0 1px black;
}

/* Responsiveness. */
@media screen and (max-width: 768px) {
  .blog-body > a {
    min-height: 250px;
  }
  .blog-title {
    padding: 16px;
  }
  .blog-title > h1 {
    font-size: 28px;
    margin-bottom: 8px;
  }
  .blog-title > p {
    font-size: 15px;
  }
}
</style>